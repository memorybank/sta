//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.gesture
{

public sealed partial class GestureMark :  Bright.Config.BeanBase 
{
    public GestureMark(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  Id = _json["id"]; }
        { if(!_json["file"].IsString) { throw new SerializationException(); }  File = _json["file"]; }
        { if(!_json["phase"].IsNumber) { throw new SerializationException(); }  Phase = (gesture.Phase)_json["phase"].AsInt; }
        { if(!_json["type"].IsNumber) { throw new SerializationException(); }  Type = (gesture.Type)_json["type"].AsInt; }
        { if(!_json["directionOfThePalm"].IsNumber) { throw new SerializationException(); }  DirectionOfThePalm = (gesture.DirectionOfThePalm)_json["directionOfThePalm"].AsInt; }
        { if(!_json["singleAndDoubleHand"].IsNumber) { throw new SerializationException(); }  SingleAndDoubleHand = (gesture.SingleAndDoubleHand)_json["singleAndDoubleHand"].AsInt; }
        { if(!_json["isLoop"].IsNumber) { throw new SerializationException(); }  IsLoop = (gesture.IsLoop)_json["isLoop"].AsInt; }
        { if(!_json["amplitude"].IsNumber) { throw new SerializationException(); }  Amplitude = (gesture.Amplitude)_json["amplitude"].AsInt; }
        { if(!_json["altitude"].IsNumber) { throw new SerializationException(); }  Altitude = (gesture.Altitude)_json["altitude"].AsInt; }
        { if(!_json["isFullBody"].IsBoolean) { throw new SerializationException(); }  IsFullBody = _json["isFullBody"]; }
        PostInit();
    }

    public GestureMark(int id, string file, gesture.Phase phase, gesture.Type type, gesture.DirectionOfThePalm directionOfThePalm, gesture.SingleAndDoubleHand singleAndDoubleHand, gesture.IsLoop isLoop, gesture.Amplitude amplitude, gesture.Altitude altitude, bool isFullBody ) 
    {
        this.Id = id;
        this.File = file;
        this.Phase = phase;
        this.Type = type;
        this.DirectionOfThePalm = directionOfThePalm;
        this.SingleAndDoubleHand = singleAndDoubleHand;
        this.IsLoop = isLoop;
        this.Amplitude = amplitude;
        this.Altitude = altitude;
        this.IsFullBody = isFullBody;
        PostInit();
    }

    public static GestureMark DeserializeGestureMark(JSONNode _json)
    {
        return new gesture.GestureMark(_json);
    }

    /// <summary>
    /// 序号
    /// </summary>
    public int Id { get; private set; }
    /// <summary>
    /// 文件名
    /// </summary>
    public string File { get; private set; }
    /// <summary>
    /// 阶段
    /// </summary>
    public gesture.Phase Phase { get; private set; }
    /// <summary>
    /// 类别
    /// </summary>
    public gesture.Type Type { get; private set; }
    /// <summary>
    /// 手心朝向
    /// </summary>
    public gesture.DirectionOfThePalm DirectionOfThePalm { get; private set; }
    /// <summary>
    /// 单双手
    /// </summary>
    public gesture.SingleAndDoubleHand SingleAndDoubleHand { get; private set; }
    /// <summary>
    /// 是否循环
    /// </summary>
    public gesture.IsLoop IsLoop { get; private set; }
    /// <summary>
    /// 幅度
    /// </summary>
    public gesture.Amplitude Amplitude { get; private set; }
    /// <summary>
    /// 小分类-手势高度
    /// </summary>
    public gesture.Altitude Altitude { get; private set; }
    /// <summary>
    /// 是否作用全身
    /// </summary>
    public bool IsFullBody { get; private set; }

    public const int __ID__ = 802038385;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "File:" + File + ","
        + "Phase:" + Phase + ","
        + "Type:" + Type + ","
        + "DirectionOfThePalm:" + DirectionOfThePalm + ","
        + "SingleAndDoubleHand:" + SingleAndDoubleHand + ","
        + "IsLoop:" + IsLoop + ","
        + "Amplitude:" + Amplitude + ","
        + "Altitude:" + Altitude + ","
        + "IsFullBody:" + IsFullBody + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
