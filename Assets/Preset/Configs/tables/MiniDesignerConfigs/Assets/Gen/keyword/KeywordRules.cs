//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.keyword
{

public sealed partial class KeywordRules :  Bright.Config.BeanBase 
{
    public KeywordRules(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  Id = _json["id"]; }
        { if(!_json["name"].IsString) { throw new SerializationException(); }  Name = _json["name"]; }
        { var _json1 = _json["rule"]; if(!_json1.IsArray) { throw new SerializationException(); } Rule = new System.Collections.Generic.List<string>(_json1.Count); foreach(JSONNode __e in _json1.Children) { string __v;  { if(!__e.IsString) { throw new SerializationException(); }  __v = __e; }  Rule.Add(__v); }   }
        { var _json1 = _json["anim"]; if(!_json1.IsArray) { throw new SerializationException(); } Anim = new System.Collections.Generic.List<int>(_json1.Count); foreach(JSONNode __e in _json1.Children) { int __v;  { if(!__e.IsNumber) { throw new SerializationException(); }  __v = __e; }  Anim.Add(__v); }   }
        { var _json1 = _json["facial_expression"]; if(!_json1.IsArray) { throw new SerializationException(); } FacialExpression = new System.Collections.Generic.List<keywords.FacialExpressionType>(_json1.Count); foreach(JSONNode __e in _json1.Children) { keywords.FacialExpressionType __v;  { if(!__e.IsNumber) { throw new SerializationException(); }  __v = (keywords.FacialExpressionType)__e.AsInt; }  FacialExpression.Add(__v); }   }
        { var _json1 = _json["facial_expression_amplitude"]; if(!_json1.IsArray) { throw new SerializationException(); } FacialExpressionAmplitude = new System.Collections.Generic.List<int>(_json1.Count); foreach(JSONNode __e in _json1.Children) { int __v;  { if(!__e.IsNumber) { throw new SerializationException(); }  __v = __e; }  FacialExpressionAmplitude.Add(__v); }   }
        PostInit();
    }

    public KeywordRules(int id, string name, System.Collections.Generic.List<string> rule, System.Collections.Generic.List<int> anim, System.Collections.Generic.List<keywords.FacialExpressionType> facial_expression, System.Collections.Generic.List<int> facial_expression_amplitude ) 
    {
        this.Id = id;
        this.Name = name;
        this.Rule = rule;
        this.Anim = anim;
        this.FacialExpression = facial_expression;
        this.FacialExpressionAmplitude = facial_expression_amplitude;
        PostInit();
    }

    public static KeywordRules DeserializeKeywordRules(JSONNode _json)
    {
        return new keyword.KeywordRules(_json);
    }

    /// <summary>
    /// 序号
    /// </summary>
    public int Id { get; private set; }
    /// <summary>
    /// 名字
    /// </summary>
    public string Name { get; private set; }
    /// <summary>
    /// 规则表达式（括号中会当成变量名从keyword_regex表格替换）。多种可能用;分割。多个动画用,分割；标点用中文版
    /// </summary>
    public System.Collections.Generic.List<string> Rule { get; private set; }
    /// <summary>
    /// 动画
    /// </summary>
    public System.Collections.Generic.List<int> Anim { get; private set; }
    /// <summary>
    /// 情绪（类别，0-6）
    /// </summary>
    public System.Collections.Generic.List<keywords.FacialExpressionType> FacialExpression { get; private set; }
    /// <summary>
    /// 情绪强度（与情绪相对应，0-100）
    /// </summary>
    public System.Collections.Generic.List<int> FacialExpressionAmplitude { get; private set; }

    public const int __ID__ = -281180013;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "Rule:" + Bright.Common.StringUtil.CollectionToString(Rule) + ","
        + "Anim:" + Bright.Common.StringUtil.CollectionToString(Anim) + ","
        + "FacialExpression:" + Bright.Common.StringUtil.CollectionToString(FacialExpression) + ","
        + "FacialExpressionAmplitude:" + Bright.Common.StringUtil.CollectionToString(FacialExpressionAmplitude) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
